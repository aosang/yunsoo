supabase document for chinese : https://document.memfiredb.com/docs

{
      // title: 'Status',
      // dataIndex: 'product_status',
      // key: 'product_status',
      // render: (text: string) => {
      //   return (
      //     <div>
      //       {text === 'Putaway' && <Tag color='success'>{text}</Tag>}
      //       {text === 'Checkout' && <Tag color='processing'>{text}</Tag>}
      //       {text === 'Under maintenance' && <Tag color='warning'>{text}</Tag>}
      //       {text === 'Decommission' && <Tag color='error'>{text}</Tag>}
      //     </div>
      //   )
      // }
    },

    {
      title: 'User',
      dataIndex: 'product_username',
      key: 'product_username',
      render: (text: string) => {
        return (
          <div>
            {text? text : '-'}
          </div>
        )
      }
    },


    'use client'
import { useState, useEffect } from "react"
import { supabase } from "@/utils/clients"
import { Upload, Table } from 'antd'
import { InboxOutlined } from '@ant-design/icons'
import dayjs from "dayjs"
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'
import * as XLSX from 'xlsx'
import { Button } from 'antd'


const { Dragger } = Upload

// 启用插件
dayjs.extend(utc)
dayjs.extend(timezone)

// 格式化timestamptz时间
const formatTimestamptz = (timestamptz: string) => {
  // console.log(timestamptz)
  if (!timestamptz) return '';

  // 将UTC时间转换为东八区(Asia/Shanghai)时间
  return dayjs(timestamptz).tz('Asia/Shanghai').format('YYYY-MM-DD HH:mm:ss');
}

type tableDataProps = {
  order: number
  name: string
  age: number
  address: string
}

const Test = () => {
  const [tableData, setTableData] = useState<tableDataProps[]>([])
  const [aiResponse, setAiResponse] = useState<string>("")
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const columns = [{
    title: 'No.',
    dataIndex: 'order',
    key: 'order',
  },
  {
    title: '时间',
    dataIndex: 'time',
    key: 'time',
    render: (text: string) => {
      return formatTimestamptz(text)
    }
  },
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  }, {
    title: 'Age',
    dataIndex: 'age',
    key: 'age',
  },
  {
    title: 'Address',
    dataIndex: 'address',
    key: 'address',
  }]

  const handleUpload = (file: File) => {
    const reader = new FileReader()
    reader.onload = async (e) => {
      const binaryString = e.target?.result as string
      const wb = XLSX.read(binaryString, { type: 'binary' })
      const sheetName = wb.SheetNames[0]
      const sheet = wb.Sheets[sheetName]
      const jsonData = XLSX.utils.sheet_to_json(sheet)

      const { data: insertedData, error } = await supabase.from('test_table').upsert(jsonData)
      if (error) {
        console.log(error)
      } else {
        setTableData(insertedData! as tableDataProps[])
        getTableData()
      }
    }
    reader.readAsArrayBuffer(file)
  }

  const uploadProps = {
    beforeUpload: (file: File) => {
      const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.type === 'application/vnd.ms-excel'
      if (!isExcel) {
        alert('只能上传Excel文件!');
      }
      return isExcel;
    },

    customRequest: (options) => {
      handleUpload(options.file)
      options.onSuccess()
    }
  }

  const getTableData = async () => {
    const { data, error } = await supabase.from('test_table').select('*')
    if (error) {
      console.log(error)
    } else {
      setTableData((data! as tableDataProps[]).map((item, index) => ({
        ...item,
        order: index + 1,
        // time: dayjs().format('YYYY-MM-DD HH:mm:ss')
      })))
    }
  }

  const getAIDataEvent = async () => {
    setIsLoading(true)
    setAiResponse("")
    
    const options = {
      method: 'POST',
      headers: { 
        Authorization: 'Bearer sk-apsnvgfxprqmsvacjrajtfinrvbyowwbeskipyzrjdogfyze', 
        'Content-Type': 'application/json' 
      },
      body: JSON.stringify({
        "model": "Qwen/QwQ-32B",
        "messages": [{"role": "user", "content": "你好，AI助手"}],
        "stream": true,  // 启用流式输出
        "max_tokens": 512,
        "stop": null,
        "temperature": 0.7,
        "top_p": 0.7,
        "top_k": 50,
        "frequency_penalty": 0.5,
        "n": 1,
        "response_format": {"type": "text"},
        "tools": [{"type": "function", "function": {"description": "<string>", "name": "<string>", "parameters": {}, "strict": false}}]
      })
    };

    try {
      const response = await fetch('https://api.siliconflow.cn/v1/chat/completions', options);
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      if (!response.body) {
        throw new Error("Response body is null");
      }
      
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          break;
        }
        
        // 解码二进制数据
        const chunk = decoder.decode(value, { stream: true });
        
        // 处理每个数据块
        const lines = chunk
          .split('\n')
          .filter(line => line.trim() !== '' && line.trim() !== 'data: [DONE]');
        
        for (const line of lines) {
          try {
            // 移除 "data: " 前缀并解析 JSON
            const jsonStr = line.replace(/^data: /, '').trim();
            if (!jsonStr) continue;
            
            const json = JSON.parse(jsonStr);
            
            if (json.choices && json.choices[0]?.delta?.content) {
              const content = json.choices[0].delta.content;
              setAiResponse(prev => prev + content);
            }
          } catch (e) {
            console.error("解析流数据时出错:", e);
          }
        }
      }
    } catch (err) {
      console.error("获取AI数据时出错:", err);
    } finally {
      setIsLoading(false);
    }
  }

  useEffect(() => {
    getTableData()
  }, [])

  return (
    <div>
      <div className="flex items-center justify-center flex-col mt-4">
        <Button
          type="primary"
          className="w-[260px] h-10 rounded-md bg-blue-500 hover:bg-blue-600 text-white font-medium transition duration-200"
          onClick={getAIDataEvent}
          loading={isLoading}
        >
          请求数据
        </Button>
        
        {/* 显示AI响应 */}
        {aiResponse && (
          <div className="mt-4 p-4 w-full max-w-3xl border border-gray-200 rounded-lg bg-white">
            <h3 className="text-lg font-medium mb-2">AI响应:</h3>
            <div className="whitespace-pre-wrap">{aiResponse}</div>
          </div>
        )}
      </div>

      <div className="text-center mt-9 p-9">
        <Dragger {...uploadProps} showUploadList={false}>
          <p className="ant-upload-drag-icon">
            <InboxOutlined />
          </p>
          <p className="ant-upload-text">Click or drag file to this area to upload</p>
          <p className="ant-upload-hint">
            Support for a single or bulk upload. Strictly prohibited from uploading company data or other
            banned files.
          </p>
        </Dragger>
        {/* <Upload {...uploadProps} showUploadList={false}>
          <Button type='primary' icon={<UploadOutlined />}>Upload</Button>
        </Upload> */}
        <Table className='mt-9' dataSource={tableData} columns={columns} />
      </div>
    </div>

  )
}

export default Test


